Scrum or SCRUM, is a framework for project management, with an initial emphasis on software development, although it has been used in other fields including research, sales, marketing and advanced technologies. It is designed for teams of ten or fewer members, who break their work into goals that can be completed within time-boxed iterations, called sprints, no longer than one month and most commonly two weeks. The scrum team assesses progress in time-boxed daily meetings of 15 minutes or fewer, called daily scrums (a form of stand-up meeting). At the end of the sprint, the team holds two further meetings: the sprint review which demonstrates the work done to stakeholders to elicit feedback, and sprint retrospective which enables the team to reflect and improve.
The term scrum is borrowed from rugby, where it is a formation of players. The term scrum was chosen by the paper's authors because it emphasizes teamwork.The software development term scrum was first used in a 1986 paper titled "The New New Product Development Game" by Hirotaka Takeuchi and Ikujiro Nonaka. The paper was published in the Jan 1986 issue of Harvard Business Review. 
Scrum is occasionally seen written in all-capitals, as SCRUM. While the word itself is not an acronym, its capitalized styling likely comes from an early paper by Ken Schwaber that capitalized SCRUM in its title.
While the trademark on the term scrum itself has been allowed to lapse, it is now deemed as a generic trademark owned by the wider community rather than an individual.
Scrum is a lightweight, iterative and incremental framework for developing, delivering, and sustaining complex products. The framework challenges assumptions of the traditional, sequential approach to product development, and enables teams to self-organize by encouraging physical co-location or close online collaboration of all team members, as well as daily face-to-face communication among all team members and disciplines involved.
A key principle of scrum is the dual recognition that customers will change the scope of what is wanted (often called requirements volatility) and that there will be unpredictable challenges — for which a predictive or planned approach is not suited.  These changes come from a variety of sources, but according to scrum, understanding why is irrelevant, and change should simply be accepted, embraced and analyzed for benefits.
Hirotaka Takeuchi and Ikujiro Nonaka introduced the term scrum in the context of product development in their 1986 Harvard Business Review article, 'The New New Product Development Game'. Takeuchi and Nonaka later argued in The Knowledge Creating Company that it is a form of "organizational knowledge creation, [...] especially good at bringing about innovation continuously, incrementally and spirally".
The authors described a new approach to commercial product development that would increase speed and flexibility, based on case studies from manufacturing firms in the automotive, photocopier and printer industries. They called this the holistic or rugby approach, as the whole process is performed by one cross-functional team across multiple overlapping phases, in which the team "tries to go the distance as a unit, passing the ball back and forth". (In rugby football, a scrum is used to restart play, as the forwards of each team interlock with their heads down and attempt to gain possession of the ball.)
The scrum framework was based on research by Schwaber with Babatunde Ogunnaike at DuPont Research Station and University of Delaware. Ogunnaike advised that attempts to develop complex products, such as software, that weren't based in empiricism were doomed to higher risks and rates of failure as the initial conditions and assumptions change. Empiricism, using frequent inspection and adaptation, with flexibility and transparency is the most suitable approach.
In the early 1990s, Ken Schwaber used what would become scrum at his company, Advanced Development Methods; while Jeff Sutherland, John Scumniotales and Jeff McKenna developed a similar approach at Easel Corporation, referring to it using the single word Scrum.
Sutherland and Schwaber worked together to integrate their ideas into a single framework, scrum. They tested scrum and continually improved it, leading to their 1995 paper, contributions to the Manifesto for Agile Software Development in 2001, and the worldwide spread and use of scrum since 2002.
In 1995, Sutherland and Schwaber jointly presented a paper describing the scrum framework at the Business Object Design and Implementation Workshop held as part of Object-Oriented Programming, Systems, Languages & Applications '95 (OOPSLA '95) in Austin, Texas. Over the following years, Schwaber and Sutherland collaborated to combine this material—with their experience and evolving good practice—to develop what became known as scrum.
In 2001, Schwaber worked with Mike Beedle to describe the method in the book, Agile Software Development with Scrum. Scrum's approach to planning and managing product development involves bringing decision-making authority to the level of operation properties and certainties.
In 2002, Schwaber with others founded the Scrum Alliance and set up the Certified Scrum accreditation series. Schwaber left the Scrum Alliance in late 2009 and founded Scrum.org which oversees the parallel Professional Scrum accreditation series.
Since 2009, a public document called The Scrum Guide has been published and updated by Schwaber and Sutherland. It has been revised 6 times, with the current version being November 2020.
The fundamental unit of scrum is a small team of people, consisting of a product owner, a scrum master, and developers. The team is self-managing, cross-functional and focuses on one objective at a time: the product goal.
The product owner, representing the product's stakeholders and the voice of the customer (or may represent the desires of a committee), is responsible for delivering good business results. Hence, the product owner is accountable for the product backlog and for maximizing the value that the team delivers. The product owner defines the product in terms of customer-centric outcomes (typically - but not limited to - user stories), adds them to the product backlog, and prioritizes them based on importance and dependencies. A scrum team should have only one product owner (although a product owner could support more than one team) and it is strongly advised against combining this role with the role of the scrum master. The product owner should focus on the business side of product development and spend the majority of time liaising with stakeholders and the team. The product owner does not dictate how the team reaches a technical solution, but seeks consensus among team members. This role is crucial and requires a deep understanding of both sides: the business and the engineers (developers) in the scrum team. Therefore, a good product owner should be able to communicate what the business needs, ask why they need it (because there may be better ways to achieve that), and convey the message to all stakeholders including the developers using technical language, as required. The product owner uses scrum's empirical tools to manage highly complex work while controlling risk and achieving value.
Communication is a core responsibility of the product owner. The ability to convey priorities and empathize with team members and stakeholders is vital to steer product development in the right direction. The product owner role bridges the communication gap between the team and its stakeholders, serving as a proxy for stakeholders to the team and as a team representative to the overall stakeholder community.
As the face of the team to the stakeholders, the following are some of the communication tasks of the product owner to the stakeholders:
Define and announce releases.
Communicate delivery and product status.
Share progress during governance meetings.
Share significant RIDAs (risks, impediments, dependencies, and assumptions) with stakeholders.
Negotiate priorities, scope, funding, and schedule.
Ensure that the product backlog is visible, transparent and clear.Ability to relate is a key attribute for a product owner to have—the ability to put one's self in another's shoes. A product owner converses with different stakeholders with a variety of backgrounds, job roles, and objectives - and should be able to appreciate these different points of view. To be effective, it is wise for a product owner to know the level of detail the audience needs. The developers need thorough feedback and specifications so they can build a product up to expectation, while an executive sponsor may just need summaries of progress. Providing more information than necessary may lose stakeholder interest and waste time. A direct means of communication is preferred by seasoned product owners.
A product owner's ability to communicate effectively is also enhanced by being skilled in techniques that identify stakeholder needs, negotiate priorities between stakeholder interests, and collaborate with developers to ensure effective implementation of requirements.
The developers carry out all work required to build increments of value every sprint.
The term developers  refers to anyone who plays a role in the development and support of the system or product, and can include researchers, architects, designers, data specialists, statisticians, analysts, engineers, programmers, and testers, among others. However, due to the confusion that can arise when some people do not feel the term 'developer' applies to them, they are often referred to just as team members.
The team is self-organizing. While no work should come to the team except through the product owner, and the scrum master is expected to protect the team from distractions, the team are encouraged to interact directly with customers and/or stakeholders to gain maximum understanding and immediacy of feedback.
Scrum is facilitated by a scrum master, who is accountable for removing impediments to the ability of the team to deliver the product goals and deliverables. The scrum master is not a traditional team lead or project manager but acts as a barrier between the team and any distracting influences. The scrum master ensures that the Scrum framework is followed by coaching the team in Scrum theory and concepts, often facilitating key sessions, and encourages the team to grow and to improve. The role has also been referred to as a team facilitator or servant-leader to reinforce these dual perspectives.
The core responsibilities of a scrum master include (but are not limited to):
Helping the product owner maintain the product backlog in a way that ensures the needed work is well understood so the team can continually make forward progress
Helping the team to determine the definition of done for the product, with input from key stakeholders
Coaching the team, within the scrum principles, in order to deliver high-quality features for its product
Educating key stakeholders and the rest of the organization on scrum (and possibly agile) principles
Helping the scrum team avoid or remove impediments to its progress, whether internal or external to the team
Promoting self-organization and cross-functionality within the team
Facilitating team events to ensure regular progressThe scrum master helps people and organizations adopt empirical and lean thinking, leaving behind hopes for certainty and predictability.
One of the ways the scrum master role differs from a project manager is that the latter may have people management responsibilities and the scrum master does not. A scrum master provides a limited amount of direction since the team is expected to be empowered and self-organizing. Scrum does not formally recognize the role of project manager, as traditional command and control tendencies would cause difficulties.
A sprint (also known as iteration or timebox) is the basic unit of development in scrum. The sprint is a timeboxed effort; that is, the length is agreed and fixed in advance for each sprint and is normally between one week and one month, with two weeks being the most common.
Each sprint starts with a sprint planning event in which a sprint goal is defined. Priorities for the upcoming sprint are chosen out of the backlog. Each sprint ends with two events:
a sprint review (progress shown to stakeholders to elicit their feedback)
a sprint retrospective (identify lessons and improvements for the next sprints).Scrum emphasizes valuable, actionable output at the end of the sprint that just was completed. In the case of software, this likely includes that products are fully integrated, tested and documented, and potentially releasable.
At the beginning of a sprint, the scrum team holds a sprint planning event to:
Agree on the sprint goal, a short description of what they forecast to deliver by sprint end, based on the priorities set by the product owner
Select product backlog items that contribute towards this goal
Form a sprint backlog by mutually discussing and agreeing on which items are intended to be done during that sprintThe maximum duration of sprint planning is eight hours for a four-week sprint. As the detailed work is elaborated, some product backlog items may be split or returned to the product backlog if the team believes they cannot complete that work in a single sprint.
Each day during a sprint, the developers hold a daily scrum (sometimes conducted standing up) with specific guidelines:
All developers come prepared. The daily scrum:
is focused on inspecting progress towards the sprint goal
should happen at the same time and place every day
is limited (timeboxed) to fifteen minutes
is conducted however the team decides
may include others, though only developers should speak.
may be facilitated by the scrum master
may identify impediments to progress (e.g., stumbling block, risk, issue, delayed dependency, assumption proved unfounded)
does not feature discussions
is not a means of updating progress chartsNo detailed discussions should happen during the daily scrum. Once over, individual members can discuss issues in detail, often known as a 'breakout session' or an 'after party'. Issues or bugs identified should be collectively discussed outside of the daily scrum with a view to working toward a resolution.
Where the team does not see the value in this event, it is the responsibility of the scrum master to determine why and educate the team and stakeholders about Scrum principles, or encourage the team to design their own method of keeping the team fully informed of sprint progress.
Conducted at the end of a sprint, the team:
presents the completed work to the stakeholders (a.k.a. the demo)
collaborates with stakeholders on topics such as:
inviting feedback about the completed product increment
discussing the impact of incomplete work (planned or otherwise)
receiving suggestions for upcoming work (guidance of what to work on next)Product Owners should see this event as a valuable opportunity to review and refine the product backlog with stakeholders.
Guidelines for sprint reviews:
Incomplete work should not be demonstrated; although stakeholders should be presented with product increments they will be receiving, but can also request to see work in progress if necessary.  However, the team should only be prepared to show what has been done.
The recommended duration is two hours for a two-week sprint (proportional for other sprint-durations).At the sprint retrospective, the team:
reflects on the past sprint(s)
inspects how the last Sprint went (individuals, interactions, processes, tools, Definition of Done)
identifies and agrees on continuous process improvement actionsGuidelines for sprint retrospectives:
Three suggested areas to consider in sprint retrospectives are:
What went well during the sprint?
What did not go well?
What could we do differently the next sprint?
The duration is maximum of three hours for a four-week sprint, proportional for other sprint duration(s)(e.g. one-and-a-half hours for a two-week sprint).The scrum master may facilitate this event, but they can also be present just as a part of the team.
Although not originally a core scrum practice, backlog refinement (formerly called grooming) was added to the Scrum Guide and adopted as a way of managing the quality of product backlog items entering a sprint.  It is the ongoing process of reviewing and amending/updating/re-ordering product backlog items in the light of new information.
Reasons for modifying the backlog and items within may include:
Larger items may be broken into multiple smaller ones
Acceptance criteria may be clarified
Dependencies may be identified and investigated
An item may require further discovery and analysis
Priorities may have changed; expected returns will now differRefinement means that items are appropriately prepared and ordered in a way that makes them clear and executable for developers for sprint planning.
The backlog can also include technical debt (also known as design debt or code debt). This is a concept in software development that reflects the implied cost of additional rework caused by choosing an easy solution now instead of using a better approach that would take longer.
It is recommended to invest of up to 10 percent of a team's sprint capacity upon backlog refinement.  More mature teams will not see this as a scheduled defined event but as an ad-hoc activity that forms part of the natural workflow, refining and adjusting the product backlog when needed.
The product owner can cancel a sprint if necessary, and may do so with input from others (developers, scrum master or management). For example, recent external circumstances may negate the value of the sprint goal, so it is pointless in continuing.
When a sprint is abnormally terminated, the next step is to conduct new sprint planning, where the reason for the termination is reviewed.
Artifacts refer to documentation used for managing work in the project.
The product backlog is a breakdown of work to be done and contains an ordered list of product requirements that the team maintains for a product. Common formats for backlog items include user stories and use cases. These requirements define features, bug fixes, non-functional requirements, etc. — whatever delivers a viable product. The product owner prioritizes product backlog items (PBIs) based on considerations such as risk, business value, dependencies, size, and date needed.
The product backlog is "what is needed, ordered by when it is needed" and is visible to everyone but may only be changed with  consent of the product owner, who is responsible for managing and maintaining the product backlog items.
The product backlog contains the product owner's assessment of business value and may include the team's assessment of effort or complexity, often, but not always, stated in story points using the rounded Fibonacci scale. These estimates help the product owner to gauge the timeline and may influence the ordering of product backlog items; for example, for two features with the same business value, the product owner may schedule earlier delivery of work with the lower development effort (because the return on investment is higher) or the one with higher development effort (because it is more complex or riskier, and they want to retire that risk earlier).
The product backlog and the business value of each product backlog item is the responsibility of the product owner. The effort to deliver each item may be estimated in story points, or time. By estimating in story points, the team reduces the dependency of individual developers; this is useful especially for dynamic teams where developers are often assigned to other work after sprint delivery. For instance, if a user story is estimated as a 5 in effort (using Fibonacci sequence), it remains 5 regardless of how many developers are working on it
Story points define the effort in a time-box, so they do not change with time. For instance, in one hour an individual can walk, run, or climb, but the effort expended is clearly different. The gap progression between the terms in the Fibonacci sequence encourages the team to deliver carefully considered estimates. Estimates of 1, 2 or 3 imply similar efforts (1 being trivial), but if the team estimates an 8 or 13 (or higher), the impact on both delivery and budget can be significant. The value of using story points is that the team can reuse them by comparing similar work from previous sprints, but it should be recognized that estimates are relative to that team. For example, an estimate of 5 for one team could be a 2 for another composed of more experienced developers with higher capability.
Every team should have a product owner, although in many instances a product owner could work with more than one team. The product owner is responsible for maximizing the value of the product. The product owner gathers input and takes feedback from, and is lobbied by, many people but ultimately has the final decision about what gets built.
The product backlog:
Captures requests to modify a product—including new features, replacing old features, removing features, and fixing issues
Ensures the developers have work that maximizes business benefit of the productTypically, the whole team works together to refine the product backlog, which evolves as new information surfaces about the product and its customers, and so later sprints may address new work.
A product backlog, in its simplest form, is merely a list of items to work on. Having well-established rules about how work is added, removed and ordered helps the whole team make better decisions about how to change the product.
The product owner prioritizes product backlog items based on which are needed soonest. Developers, influenced by the sprint goal, choose items for coming sprint, moving those items from the product backlog to the sprint backlog, which is the list of items they will build. Conceptually, the sprint goal is influenced by high-priority items at the top of the list, but it is not unusual to see developers taking some lower-priority items if there is time left within the sprint to accommodate more work.
High-priority items (at the top of the backlog) should be broken down into more detail that are suitable for the developers to work on. The further down the backlog, the less detailed items will be. As Schwaber and Beedle put it "The lower the priority, the less detail until you can barely make out the backlog item."
As the team works through the backlog, it must be assumed that change happens outside their environment—the team can learn about new market opportunities to take advantage of, competitor threats that arise, and feedback from customers that can change the way the product was meant to work. All of these new ideas tend to trigger the team to adapt the backlog to incorporate new knowledge. This is part of the fundamental mindset of an agile team. The world changes, the backlog is never finished.
The sprint backlog is the subset of items from the product backlog intended for developers to address in the upcoming sprint. Developers will fill this backlog until they feel they have enough work to fill the sprint, using past performance to assess capacity for the next sprint, using this as a guideline of how much 'effort' they can complete.
Work on the sprint backlog is never assigned (or pushed) to developers; team members pull work as needed according to the backlog priority and their own skills and capacity. This promotes self-organization of the developers.
The sprint backlog is the property of the developers, and all included estimates are provided by the developers.  Although not part of scrum, some teams use an accompanying board to visualize the state of work in the current sprint: ToDo, Doing, Done.
The increment is the potentially releasable output of the sprint that meets the sprint goal. It is formed from all the completed sprint backlog items, integrated with the work of all previous sprints. The increment must be complete, according to the scrum team's Definition of Done (DoD), fully functioning, and in a usable condition regardless of whether the product owner decides to actually deploy and use it.
The following artifacts and techniques can be used to help people use scrum.
Often used in scrum (but not part of scrum), a burndown chart is a publicly displayed chart showing remaining work. Updated every day, it provides quick visualizations for reference. The horizontal axis of the burndown chart shows the days remaining, while the vertical axis shows the amount of work remaining each day.
During sprint planning, the ideal burndown chart is plotted. Then, during the sprint, developers update the chart with remaining work so the  chart is updated day by day, showing a comparison between actual and predicted.
It should not be confused with an earned value chart.
The release burn-up chart is a way for the team to provide visibility and track progress toward a release. Updated at the end of each sprint, it shows progress toward delivering a forecast scope. The horizontal axis of the release burn-up chart shows the sprints in a release, while the vertical axis shows the amount of work completed at the end of each sprint (typically representing cumulative story points of work completed). Progress is plotted as a line that grows up to meet a horizontal line that represents the forecast scope; often shown with a forecast, based on progress to date, that indicates how much scope might be completed by a given release date or how many sprints it will take to complete the given scope.
The release burn-up chart makes it easy to see how much work has been completed, how much work has been added or removed (if the horizontal scope line moves), and how much work is left to be done.
The start criteria to determine whether the specifications and inputs are set clearly enough to start the work item.
The exit-criteria to determine whether work on sprint backlog item is complete, for example: the DoD requires that all regression tests be successful. The definition of done may vary from one team to another but must be consistent within one team.
A team's total capability effort for a single sprint, derived by evaluating work completed in the last sprint. The collection of historical velocity data is a guideline for assisting the team in understanding their capacity, i.e.: how much work they can comfortably achieve.
This metric has attracted controversy in the scrum community:
story points consumed does not equal value delivered: the team may see work done and ignore deliverable benefits to stakeholders
introduction of distracting practices: estimation versus actuals, variance investigation and policy of re-estimations begin to arise
management sees velocity as a performance metric so seeks to increase it, meaning:
quality suffers - the team begins to "cut corners" to include the added workload
morale suffers - the team are unable to work at a comfortable sustainable pace and increased pressure causes burn-out
estimation suffers - developers will inflate estimates to build in buffers and "game the metrics", measuring the same effort on a different scale
value suffers - the end effect is interference that causes stakeholder dissatisfaction as a result of switching focus away from business value deliveryWhilst there is value in understanding a team's delivery capacity, velocity should be considered an indicator for the team and not a dial that can be adjusted.
A time-boxed period used to research a concept or create a simple prototype. Spikes can either be planned to take place in between sprints or, for larger teams, a spike might be accepted as one of many sprint delivery objectives. Spikes are often introduced before the delivery of large or complex product backlog items in order to secure budget, expand knowledge, or produce a proof of concept. The duration and objective(s) of a spike are agreed by the team before the start. Unlike sprint commitments, spikes may or may not deliver tangible, shippable, valuable functionality. For example, the objective of a spike might be to successfully reach a decision on a course of action. The spike is over when the time is up, not necessarily when the objective has been delivered.
Also called a drone spike, a tracer bullet is a spike with the current architecture, current technology set, current set of best practices that result in production quality code. It might just be a very narrow implementation of the functionality but is not throwaway code. It is of production quality, and the rest of the iterations can build on this code. The name has military origins as ammunition that makes the path of the bullet visible, allowing for corrections. Often these implementations are a 'quick shot' through all layers of an application, such as connecting a single form's input field to the back-end, to prove the layers connect as expected.
The benefits of scrum may be more difficult to achieve with:
Teams whose members are geographically dispersed or part-time: In scrum, developers should have close and ongoing interaction, ideally working together in the same space most of the time. While recent improvements in technology have reduced the impact of these barriers (e.g., being able to collaborate on a digital whiteboard), the Agile manifesto asserts that the best communication is face to face.
Teams whose members have very specialized skills: In scrum, developers should have T-shaped skills, allowing them to work on tasks outside of their specialization. This can be encouraged by good Scrum leadership. While team members with very specific skills can and do contribute well, they should be encouraged to learn more about and collaborate with other disciplines.
Products with many external dependencies: In scrum, dividing product development into short sprints requires careful planning; external dependencies, such as user acceptance testing or coordination with other teams, can lead to delays and the failure of individual sprints.
Products that are mature or legacy or with regulated quality control: In scrum, product increments should be fully developed and tested in a single sprint; products that need large amounts of regression testing or safety testing (e.g., medical devices or vehicle control) for each release are less suited to short sprints than to longer waterfall releases.Like other agile approaches, effective adoption of scrum can be supported through (but not dependent upon) a wide range of tools available.
Many companies use universal tools, such as spreadsheets to build and maintain a sprint backlog. There are also open-source and proprietary software packages which use scrum terminology for product development or support multiple product development approaches including scrum.
Other organizations implement scrum without software tools and maintain their artefacts in hard-copy forms such as paper, whiteboards, and sticky notes.
Scrum is a feedback-driven empirical approach which is, like all empirical process control, underpinned by the three pillars of transparency, inspection, and adaptation. All work within the scrum framework should be visible to those responsible for the outcome: the process, the workflow, progress, etc. In order to make these things visible, scrum teams need to frequently inspect the product being developed and how well the team is working. With frequent inspection, the team can spot when their work deviates outside of acceptable limits and adapt their process or the product under development.
These three pillars require trust and openness in the team, which the following five values of scrum enable:
Commitment: Team members individually commit to achieving their team goals, each and every sprint.
Courage: Team members know they have the courage to work through conflict and challenges together so that they can do the right thing.
Focus: Team members focus exclusively on their team goals and the sprint backlog; there should be no work done other than through their backlog.
Openness: Team members and their stakeholders agree to be transparent about their work and any challenges they face.
Respect: Team members respect each other to be technically capable and to work with good intent.Scrum is used in a variety of contexts to achieve many different aims. To accomplish those varying ends, Scrum is frequently  tailored or adapted. A common approach to adapting Scrum is hybridization of scrum with other software development methodologies as scrum does not cover the whole product development lifecycle; therefore, organizations find the need to add in additional processes to create a more comprehensive implementation. For example, at the start of product development, organizations commonly add process guidance on the business case, requirements gathering and prioritization, initial high-level design, and budget and schedule forecasting.
Various authors and communities of people who use scrum have also suggested more detailed techniques for how to apply or adapt scrum to particular problems or organizations.  Many refer to these methodological techniques as 'patterns' - by analogy with design patterns in architecture and software.
Scrumban is a software production model based on scrum and kanban. Scrumban is especially suited for product maintenance with frequent and unexpected work items, such as production defects or programming errors. In such cases the time-limited sprints of the scrum framework may be perceived to be of less benefit, although scrum's daily events and other practices can still be applied, depending on the team and the situation at hand. Visualization of the work stages and limitations for simultaneous unfinished work and defects are familiar from the Kanban model. Using these methods, the team's workflow is directed in a way that allows for minimum completion time for each work item or programming error, and on the other hand ensures each team member is constantly employed.
To illustrate each stage of work, teams working in the same space often use post-it notes or a large whiteboard. In the case of decentralized teams, stage-illustration software such as Assembla, Jira or Agilo can be used.
The major differences between scrum and kanban is that in scrum work is divided into sprints that last a fixed amount of time, whereas in Kanban the flow of work is continuous. This is visible in work stage tables, which in scrum are emptied after each sprint, whereas in Kanban all tasks are marked on the same table. Scrum focuses on teams with multifaceted know-how, whereas Kanban makes specialized, functional teams possible.
The scrum of scrums is a technique to operate scrum at scale, for multiple teams working on the same product, allowing them to discuss progress on their interdependencies, focusing on how to coordinate delivering software, especially on areas of overlap and integration. Depending on the cadence (timing) of the scrum of scrums, the relevant daily scrum for each scrum team ends by designating one member as an ambassador to participate in the scrum of scrums with ambassadors from other teams. Depending on the context, the ambassadors may be technical contributors or each team's scrum master.
Rather than simply a progress update, the scrum of scrums should focus on how teams are collectively working to resolve, mitigate, or accept any risks, impediments, dependencies, and assumptions (RIDAs) that have been identified. The scrum of scrums tracks these RIDAs via a backlog of its own, such as a risk board (sometimes known as a ROAM board after the initials of resolved, owned, accepted, and mitigated), which typically leads to greater coordination and collaboration between teams.
This should run similar to a daily scrum, with each ambassador answering the following four questions:
What risks, impediments, dependencies, or assumptions has your team resolved since we last met?
What risks, impediments, dependencies, or assumptions will your team resolve before we meet again?
Are there any new risks, impediments, dependencies, or assumptions slowing your team down or getting in their way?
Are you about to introduce a new risk, impediment, dependency, or assumption that will get in another team's way?As Jeff Sutherland commented,
Since I originally defined the Scrum of Scrums (Ken Schwaber was at IDX working with me), I can definitively say the Scrum of Scrums is not a 'meta Scrum'. The Scrum of Scrums as I have used it is responsible for delivering the working software of all teams to the Definition of Done at the end of the sprint, or for releases during the sprint. PatientKeeper delivered to production four times per Sprint. Ancestry.com delivers to production 220 times per two-week Sprint. Hubspot delivers live software 100-300 times a day. The Scrum of Scrums Master is held accountable for making this work. So the Scrum of Scrums is an operational delivery mechanism.Large-scale scrum (LeSS) is a product development framework that extends scrum with scaling rules and guidelines without losing the original purposes of scrum.
There are two levels to the framework: the first LeSS level is designed for up to eight teams; the second level, known as 'LeSS Huge', introduces additional scaling elements for development with up to hundreds of developers. "Scaling Scrum starts with understanding and being able to adopt standard real one-team Scrum. Large-scale Scrum requires examining the purpose of single-team Scrum elements and figuring out how to reach the same purpose while staying within the constraints of the standard Scrum rules."
Bas Vodde and Craig Larman evolved the LeSS framework from their experiences working with large-scale product development, especially in the telecoms and finance industries. It evolved by taking Scrum and trying many different experiments to discover what works. In 2013, the experiments were solidified into the LeSS framework rules. The intention of LeSS is to 'descale' organization complexity, dissolving unnecessary complex organizational solutions, and solving them in simpler ways. Less roles, less management, less organizational structures.
Scrum events have been reported to be hurting productivity and wasting time that could be better spent on actual productive tasks, usually caused by a misunderstanding of the event's purpose and goal, so is conducted as an overlong thorough meeting rather than a brief time-boxed discussion. Scrum practices, when not correctly followed in the spirit of the Agile Manifesto, have a tendency to become a form of micromanagement and reintroduce the same dysfunction that the practices sought to remove. Scrum also assumes that effort required for completing work can be accurately estimated, although frequently this can be quite unpredictable. Scrum deliberately omits prescriptive practices to encourage freedom of empirical analysis and experimentation. Scrum is perceived to be a form of, rather than an alternative approach to, managing projects. An initial foray into Scrum will not produce high-quality results immediately; impatience robs Scrum of the chance to embed and grow. Common dysfunctional approaches to Scrum have now been recognised as antipatterns, including Dark Scrum and Scream
Agile testing
Disciplined agile delivery
High-performance teams
Lean software development
Project management
Unified ProcessAgile Alliance's Scrum library
A Scrum Process Description by the Eclipse Process Framework (EPF) Project