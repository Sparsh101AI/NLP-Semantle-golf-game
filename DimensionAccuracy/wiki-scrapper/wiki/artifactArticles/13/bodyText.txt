
Kanban (Japanese: 看板, meaning signboard or billboard) is a  lean method to manage and improve work across human systems. This approach aims to manage work by balancing demands with available capacity, and by improving the handling of system-level bottlenecks. 
Work items are visualized to give participants a view of progress and process, from start to finish—usually via a kanban board. Work is pulled as capacity permits, rather than work being pushed into the process when requested.
In  knowledge work and in software development, the aim is to provide a visual process management system which aids decision-making about what, when, and how much to produce. The underlying kanban method originated in lean manufacturing, which was inspired by the Toyota Production System. It has its origin in the late 1940s when the Toyota automotive company implemented a production system called just-in-time; which had the objective of producing according to customer demand and identifying possible material shortages within the production line. But it was Microsoft engineer David J. Anderson who realized how this method devised by Toyota could become a process applicable to any type of organizational process. Kanban is commonly used in software development in combination with other methods and frameworks such as Scrum.
David Anderson's 2010 book, Kanban, describes an evolution of the approach from a 2004 project at Microsoft using a theory-of-constraints approach and incorporating a drum-buffer-rope (comparable to the kanban pull system), to a 2006–2007 project at Corbis in which the kanban method was identified. In 2009, Don Reinertsen published a book on second-generation lean product-development which describes the adoption of the kanban system and the use of data collection and an economic model for management decision-making. Another early contribution came from Corey Ladas, whose 2008 book Scrumban suggested that kanban could improve scrum for software development. Ladas saw scrumban as the transition from scrum to kanban. Jim Benson and Tonianne DeMaria Barry published Personal Kanban, applying kanban to individuals and small teams, in 2011. In Kanban from the Inside (2014), Mike Burrows explained kanban's principles, practices and underlying values and related them to earlier theories and models. In Agile Project Management with Kanban (2015), Eric Brechner provides an overview of kanban in practice at Microsoft and Xbox. Kanban Change Leadership (2015), by Klaus Leopold and Siegfried Kaltenecker, explained the method from the perspective of change management and provided guidance to change-initiatives. In 2016 Lean Kanban University Press published a condensed guide to the method, incorporating improvements and extensions from the early kanban projects.
The diagram here shows a software development workflow on a kanban board. Kanban boards, designed for the context in which they are used, vary considerably and may show work item types ("features" and "user stories" here), columns delineating workflow activities, explicit policies, and swimlanes (rows crossing several columns, used for grouping user stories by feature here). The aim is to make the general workflow and the progress of individual items clear to participants and stakeholders.
As described in books on kanban for software development, the two primary practices of kanban are to visualize work and limit work in progress (WIP). Four additional general practices of kanban listed in Essential Kanban Condensed are to make policies explicit, manage flow, implement feedback loops, and improve collaboratively.
The kanban board in the diagram above highlights the first three general practices of kanban.
It visualizes the work of the development team (the features and user stories).
It captures WIP limits for development steps: the circled values below the column headings that limit the number of work items under that step.
It documents policies, also known as done rules, inside blue rectangles under some of the development steps.
It also shows some kanban flow management for the "user story preparation", "user story development", and "feature acceptance" steps, which have "in progress" and "ready" sub-columns. Each step's WIP limit applies to both sub-columns, preventing work items from overwhelming the flow into or out of those steps.Kanban manages workflow directly on the kanban board. The WIP limits for development steps provide development teams immediate feedback on common workflow issues.
For example, on the kanban board shown above, the "deployment" step has a WIP limit of five and there are currently five epics shown in that step. No more work items can move into deployment until one or more epics complete that step (moving to "delivered"). This prevents the "deployment" step from being overwhelmed. Team members working on "feature acceptance" (the previous step) might get stuck because they can't deploy new epics. They can see why immediately on the board and help with the current epic deployments.
Once the five epics in the "deployment" step are delivered, the two epics from the "ready" sub-column of "feature acceptance" (the previous step) can be moved to the "deployment" column. When those two epics are delivered, no other epics can be deployed (assuming no new epics are ready). Now, team members working on deployment are stuck. They can see why immediately and help with feature acceptance.
This workflow control works similarly for every step. Problems are visual and evident immediately, and re-planning can be done continuously. The work management is made possible by limiting work in progress in a way team members can see and track at all times.
Kanban uses specific metrics to measure team capacity and estimate project length.
Team velocity defines how many tasks a team can deliver in a given period of time, for example a week or iteration. Velocity is calculated periodically and to help with accuracy of the calculated velocity, teams aim to create tasks that are similar in size. Knowing team velocity helps better predict when a project is going to end.
Lead and Cycle time defines the average time it takes to complete a task. Lead time is calculated since the team gets a request from the client and cycle time is calculated since the team starts working on a task. Lead time is used to understand how long a client has to wait for their product and cycle time is used to understand how fast the team produces a product. 
Actionable Agile metrics use cycle time to better predict when each project item is going to be finished. Created by Daniel S. Vacanti in 2015, actionable Agile metrics measure how much time it took to finish 50%, 85% and 95% of the tasks. This information can be used to help the team better predict and control task delivery dates.
List of software development philosophiesKanban: Successful Evolutionary Change for Your Technology Business, David J. Anderson. (United States, Blue Hole Press, 2010. ISBN 978-0984521401
Scrumban: Essays on Kanban Systems for Lean Software Development, Corey Ladas. (United States, Modus Cooperandi Press, 2009. ISBN 9780578002149
Agile Project Management with Kanban (Developer Best Practices), Eric Brechner. (United States: Microsoft Press, 2015). ISBN 978-0735698956.
Kanban in Action, Marcus Hammarberg and Joakim Sunden. (Shelter Island, NY: Manning Publications, 2014). ISBN 978-1-617291-05-0.
Lean from the Trenches: Managing Large-Scale Projects with Kanban, Henrik Kniberg. (Dallas, TX: The Pragmatic Programmers, 2012). ISBN 978-1-93435-685-2.
Stop Starting, Start Finishing! Arne Roock and Claudia Leschik. (USA: Lean-Kanban University, 2012). ISBN 978-0985305161.
Real-World Kanban: Do Less, Accomplish More with Lean Thinking, Mattias Skarin. (United States: Pragmatic Bookshelf, 2015). ISBN 978-1680500776.